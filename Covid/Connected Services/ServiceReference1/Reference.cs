//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Covid.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonCase", Namespace="http://schemas.datacontract.org/2004/07/CovidHost", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class PersonCase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityCaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityConcactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateConcactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityCase {
            get {
                return this.CityCaseField;
            }
            set {
                if ((object.ReferenceEquals(this.CityCaseField, value) != true)) {
                    this.CityCaseField = value;
                    this.RaisePropertyChanged("CityCase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityConcact {
            get {
                return this.CityConcactField;
            }
            set {
                if ((object.ReferenceEquals(this.CityConcactField, value) != true)) {
                    this.CityConcactField = value;
                    this.RaisePropertyChanged("CityConcact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateConcact {
            get {
                return this.DateConcactField;
            }
            set {
                if ((object.ReferenceEquals(this.DateConcactField, value) != true)) {
                    this.DateConcactField = value;
                    this.RaisePropertyChanged("DateConcact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateResults {
            get {
                return this.DateResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.DateResultsField, value) != true)) {
                    this.DateResultsField = value;
                    this.RaisePropertyChanged("DateResults");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTest {
            get {
                return this.DateTestField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTestField, value) != true)) {
                    this.DateTestField = value;
                    this.RaisePropertyChanged("DateTest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCase", ReplyAction="http://tempuri.org/IService1/InsertCaseResponse")]
        bool InsertCase(Covid.ServiceReference1.PersonCase obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCase", ReplyAction="http://tempuri.org/IService1/InsertCaseResponse")]
        System.Threading.Tasks.Task<bool> InsertCaseAsync(Covid.ServiceReference1.PersonCase obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPerson", ReplyAction="http://tempuri.org/IService1/GetAllPersonResponse")]
        Covid.ServiceReference1.PersonCase[] GetAllPerson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPerson", ReplyAction="http://tempuri.org/IService1/GetAllPersonResponse")]
        System.Threading.Tasks.Task<Covid.ServiceReference1.PersonCase[]> GetAllPersonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddConcact", ReplyAction="http://tempuri.org/IService1/AddConcactResponse")]
        bool AddConcact(Covid.ServiceReference1.PersonCase obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddConcact", ReplyAction="http://tempuri.org/IService1/AddConcactResponse")]
        System.Threading.Tasks.Task<bool> AddConcactAsync(Covid.ServiceReference1.PersonCase obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FinishSession", ReplyAction="http://tempuri.org/IService1/FinishSessionResponse")]
        Covid.ServiceReference1.PersonCase[] FinishSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FinishSession", ReplyAction="http://tempuri.org/IService1/FinishSessionResponse")]
        System.Threading.Tasks.Task<Covid.ServiceReference1.PersonCase[]> FinishSessionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Covid.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Covid.ServiceReference1.IService1>, Covid.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertCase(Covid.ServiceReference1.PersonCase obj) {
            return base.Channel.InsertCase(obj);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCaseAsync(Covid.ServiceReference1.PersonCase obj) {
            return base.Channel.InsertCaseAsync(obj);
        }
        
        public Covid.ServiceReference1.PersonCase[] GetAllPerson() {
            return base.Channel.GetAllPerson();
        }
        
        public System.Threading.Tasks.Task<Covid.ServiceReference1.PersonCase[]> GetAllPersonAsync() {
            return base.Channel.GetAllPersonAsync();
        }
        
        public bool AddConcact(Covid.ServiceReference1.PersonCase obj) {
            return base.Channel.AddConcact(obj);
        }
        
        public System.Threading.Tasks.Task<bool> AddConcactAsync(Covid.ServiceReference1.PersonCase obj) {
            return base.Channel.AddConcactAsync(obj);
        }
        
        public Covid.ServiceReference1.PersonCase[] FinishSession() {
            return base.Channel.FinishSession();
        }
        
        public System.Threading.Tasks.Task<Covid.ServiceReference1.PersonCase[]> FinishSessionAsync() {
            return base.Channel.FinishSessionAsync();
        }
    }
}
